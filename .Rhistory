par(mfrow=c(2,2))
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],sn)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
par(mfrow=c(2,2))
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],sn)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
par(mfrow=c(2,2))
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
par(mfrow=c(2,2))
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100 #sample size of each sample
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=10 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=30 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=1000 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=10000 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
set.seed(1925) #221186
n=c(5,20,100,500) #number of samples
ns=100000 #sample size of each sample
for(i in 1:length(n)){
x=array(runif(ns*n[i],0,50),dim=c(n[i],ns)) #sample from
means=apply(x,1,mean)
hist(means, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "means",
main = paste(c("no. of samples is "),n[i]))
lines(density(means,bw=0.5), # density plot
lwd = 2, # thickness of line
col = "red")
}
alpha=0.05
ns=50 #number of samples
n=100 #sample size of each sample
x=array(rpois(ns*n,30),dim=c(ns,n)) #sample from Poisson dist with mean 30
CIs=array(NA,dim=c(ns,3))
dimnames(CIs)=list(1:ns,c("Fitted","Lower","Upper"))
for(i in 1:ns){
CIs[i,1]=mean(x[i,])
CIs[i,2:3]=CIs[i,1]+c(-1,1)*qnorm(1-alpha/2)*sd(x[i,])/sqrt(n)
}
# Confidence interval illustration
CIsdf=as.data.frame(CIs)
require(ggplot2)
install.packages("ggplot2")
# Confidence interval illustration
CIsdf=as.data.frame(CIs)
require(ggplot2)
ggplot(CIsdf, aes(x = 1:ns, y = Fitted)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = Upper , ymin = Lower))+
geom_hline(yintercept=30,color="red")
ex0603dat=read.table("http://www.stat.ufl.edu/~winner/data/biostat/ex0603.dat",header=FALSE,col.names=c("subj", "intagnt", "thcl"))
head(ex0603dat)
# Create qualitative factor variable for intagnt, and assign names to levels
fintagnt=factor(ex0603dat$intagnt, levels=1:3)
levels(fintagnt)=c("Placebo", "Famotidine", "Cimetidine")
# We have to assign subj (Subject id) as a factor level or the linear model will treat
# it as a numeric (continuous) variable and fit a regression
ex0603=data.frame(thcl=ex0603dat$thcl, fintagnt, subj=factor(ex0603dat$subj))
attach(ex0603)
head(ex0603)
# create easy to view table
table=xtabs(thcl~subj+fintagnt);table
round(addmargins(table,c(1,2),FUN=mean),2)
clrnc=read.table("http://www.stat.ufl.edu/~winner/data/biostat/ex0603.dat",header=FALSE,col.names=c("subj", "intagnt", "thcl"))
head(clrnc)
# Create qualitative factor variable for intagnt, and assign names to levels
fintagnt=factor(clrnc$intagnt, levels=1:3)
levels(fintagnt)=c("Placebo", "Famotidine", "Cimetidine")
# We have to assign subj (Subject id) as a factor level or the linear model will treat
# it as a numeric (continuous) variable and fit a regression
clrnc.df=data.frame(thcl=clrnc$thcl, fintagnt, subj=factor(clrnc$subj))
attach(clrnc.df)
head(clrnc.df)
# create easy to view table
table=xtabs(thcl~subj+fintagnt);table
round(addmargins(table,c(1,2),FUN=mean),2)
### Fancier plot ###
library(ggplot2)
library(PupillometryR)
library(Rmisc)
sumdat <- summarySE(clrnc.df, measurevar = "thcl",
groupvars=c("fintagnt", "subj"))
View(clrnc.df)
sumdat <- summarySE(clrnc.df, measurevar = "thcl",
groupvars=c("fintagnt"))
sumdat
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = score, colour = essay),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned and Inreaction Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = fintagnt)+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = blue)+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = "blue")+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = "blue")+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = sumdat, aes(x = as.numeric(fintagnt)+.1, y = thcl, group = fintagnt, colour = fintagnt), shape = 18) +
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl, fill=fintagnt)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = "blue")+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = sumdat, aes(x = as.numeric(fintagnt)+.1, y = thcl, group = fintagnt, colour = fintagnt), shape = 18) +
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned Plot")
# use "adjust" in violin to adjust density/historgram bandwidth
ggplot(clrnc.df, aes(x = fintagnt, y = thcl, fill=fintagnt)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), adjust = 0.75, trim = FALSE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(fintagnt)-.1, y = thcl, colour = fintagnt),position = position_jitter(width = .05), size = 1, shape = 1)+
geom_boxplot(outlier.shape = NA, alpha = .5, width = .1, colour = "black")+
geom_point(data = sumdat, aes(x = as.numeric(fintagnt)+.1, y = thcl, group = fintagnt, colour = fintagnt), shape = 18) +
scale_colour_brewer(palette = "Dark2")+
scale_fill_brewer(palette = "Dark2")+
ggtitle("Aligned Plot")
# create easy to view table
table=xtabs(thcl~subj+fintagnt,data=clrnc.df);table
# Fit the ANOVA for the RBD with subject and interacting agent as independent variables
rcbd=aov(thcl~fintagnt+subj,data=clrnc.df)
anova(rcbd)
# Fit the ANOVA for the RBD with subject and interacting agent as independent variables
rcbd=aov(thcl~fintagnt+subj,data=clrnc.df)
anova(rcbd)
rcbd.Tukey=TukeyHSD(rcbd,"fintagnt",level=0.95)
print(rcbd.Tukey)
plot(rcbd.Tukey, sub="Theophylline Data", adj=0)
mtext("Tukey Honest Significant Differences",side=3,line=0.5)
# Do Bonferoni using our own made function
library(DescTools)
PostHocTest(rcbd,method="bonferroni")
PostHocTest(rcbd,which="fintagnt",method="bonferroni")
# Or use
library(DescTools)
PostHocTest(rcbd,which="fintagnt",method="bonferroni")
#PostHocTest(rust.m,method="scheffe")
PostHocTest(rcbd,which="fintagnt",method="hsd") # Tukey's
MS=anova(rcbd)[,"Mean Sq"]
# Let's calculate the Relative Efficiency
df=anova(rcbd)[,"Df"]
MS=anova(rcbd)[,"Mean Sq"]
(df[2]*MS[2]+(df[2]+1)*df[1]*MS[3])/(sum(df)*MS[3])
